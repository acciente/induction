h2. Welcome to Induction

Induction is a powerful, high-performance, open-source framework for developing web applications using the Java programming language. The goal of Induction is to simplify the task of building complex, high-performance, maintainable web applications using Java technology. Induction is a 100% pure Java implementation that runs inside a Java Servlet container. Induction belongs to the class of web frameworks usually referred to as __request-based__ frameworks. 

Other popular web application frameworks for Java that may be compared to Induction include Spring MVC, Struts, Tapestry, WebWork and JPublish. 

h3. Why a new framework?

There is already a number of web application frameworks for Java, so why another Java web application framework? Following are some of the specific motivations for Induction: 

* It should not be necessary to redeploy an application to a Servlet container every time Java code is changed. It should be possible to simply recompile the changed source (using your favorite IDE) and simply reload the respective web page. 

* It should be possible to use mature Java dependency analysis tools in any IDE to analyze the dependencies between models, views and controllers (For example to answer questions such as: Which controllers use this model object? What controllers will be impacted if I edit this template?) 

* An application should not be cluttered by superfluous XML configuration files. 

* File upload handling should be simple to the point of being unremarkable (this would be an unremarked point, not to be metioned here, expect for how complex some frameworks seem to make it)

h3. Induction Features Overview

h4. General

* Runtime class reloading for controllers, views and models (no more redeploy/restart) 

* Ability to analyze dependencies between controllers, views and models using basic java dependency analysis tools in any IDE 

* Extensible architecture 
** Pluggable configuration loader 
** Pluggable URL to controller resolver 
** Pluggable redirect resolver 
** Pluggable templating engines (initial support for Freemarker, adding other templating engines would be very easy, Velocity is likely to be next) 

h4. Controller

* Parameter injection: a model object is accessible in a controller by simply declaring a parameter of the model object's type in the controller's respective method 

* Sophisticated form parameter processing, to simplify using list and map structures in an HTML form 

* Handling an uploaded file is as simple as handling a string input on a form 

h4. View

* Integrated support for templating engines (initial support for Freemarker) 

* Each template view is represented by a class that encapsulates all the data the template depends on, enabling powerful Java based dependency analysis when template changes need to be made to text-based HTML templates 

h4. Model

* Declarative control of the lifecycle of model objects 

h3. Induction Model-View-Controller Overview

Induction advocates the use of the Model-View-Controller (MVC) paradigm to web application development. Following is a brief of the summary of how Induction supports models, views and controllers. In Induction the important types of classes you will write are controllers, views and models and model factories. A very simple application may only use controllers, but most applications will use controllers, views and models and likely on one or more model factories.

h4. How Controllers Work

* All requests received by the Servlet container are processed by a controller

* A controller is a class which implements the Controller marker interface (the Controller interface just marks a class as a controller, and does not enforce any methods) 

* A model object or environment object (such as the Request, Response or Form) is accessible in a controller by simply declaring a parameter of the model object's type in the controller's respective method (this is basically dependency injection) 

* A controller may have a method for each distinct task that it performs:
** The default URL to controller resolver, allows specifying the controller class and method name in the path to invoke a controller, e.g.: http://www.inductionframework.org/demoapp/counter_app/CounterController/incrementCounter, where the controller class is demoapp.counter_app.CounterController and a method named " incrementCounter" should be invoked on the class 
** Omitting the method implies an assumed (configurable) method name should be called (usually named handler)

* The type of the return value of a controller is significant, each possible type and their meaning is given below: 
** Template: processes and return the content of the specified template object to the client 
** Text: returns the text contents to the client 
** Image/ImageStream: returns the image contents to the client 

h4. How Views Work

* A view class is a that implements one of the following interfaces (based on the purpose of view): 
** Template
** Image
** ImageStreamer
** Text

* A class, say C1, that implements the Template interface uses one of the integrated template engines.
** When processing the template the only data passed to the template is an instance of the class C1, C1 serves as the bean that defines clearly what data is uses by the associated template

h4. How Models Work

* Implements pure application logic, completely independent of views and controllers (and the Induction framework)

* A model is any user defined class 

* A configurable factory may be provided for each model class 

* Declarative control of the lifecycle of each model class:
** Application: a model object is created for the life of the application 
** Session: a model object is created for each browser session
** Request: a model object is created for each controller invocation 

h3. Where Can I Download Induction?

You can download Induction "here":/download/. We recommend the "Getting Started Tutorial":/tutorial/getting-started.html to getting you up and running quickly.

h3. How Is Induction Licensed?

Induction is released by "Acciente, LLC":http://www.acciente.com as open-source software licensed under the commercial friendly Apache 2.0 license. The decision to release Induction under the commercial friendly Apache 2.0 license was motivated by the numerous high quality open source software projects available under commercial friendly licenses from the Apache Software Foundation and other organizations and individuals. At "Acciente":http://www.acciente.com we appreciate the generosity of these projects and would like to contribute in the same spirit.

h3. Who Is Responsible For Induction Development?

Induction is under active development by "Acciente":http://www.acciente.com with the goal of providing a powerful MVC web application framework for its customers and for the community at large. "Acciente":http://www.acciente.com is committed to the long-term success of Induction. "Acciente":http://www.acciente.com is also committed to promoting the use of Induction by commercial organizations. 

h3. About Acciente

"Acciente":http://www.acciente.com is a software company located in Scottsdale, Arizona specializing in systems architecture and software design for medium to large scale software projects. You can learn more about "Acciente":http://www.acciente.com on our "about us":http://www.acciente.com/index.php?cid=about page.
 