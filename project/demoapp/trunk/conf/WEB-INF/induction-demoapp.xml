<!-- Copyright 2008 Acciente, LLC
  
     Acciente, LLC licenses this file to you under the
     Apache License, Version 2.0 (the "License"); you
     may not use this file except in compliance with the
     License. You may obtain a copy of the License at
  
         http://www.apache.org/licenses/LICENSE-2.0
  
     Unless required by applicable law or agreed to in
     writing, software distributed under the License is
     distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
     OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing
     permissions and limitations under the License.
-->

<!-- this file contains the configuration for the Induction dispatcher -->
<config>

    <!-- The following section allows you to specify locations from which
    Induction will automatically reload a class if the file has changed -->
    <java-class-path>
        <compiled-directory>
            <directory>c:/acciente/acciente-projects/software/project/demoapp/class</directory>
        </compiled-directory>
    </java-class-path>

    <!-- The following section allows you define the models used your application.
    A model definition must specify a <class> and a <scope>. The <class> specifies
    the name of the model class. The value specified for the <class> must a fully 
    qualified classname. 
    
    If a model class implements an interface and it is desired that references 
    to the model in the controllers be via the model interface then the interface 
    name must be specified as the <class> here, instead of the actual implemention 
    class name. The scope must contain one of the following values: application, 
    session, request (case insignificant).
    
    For most real-life applications, each model class will have a factory class 
    specified. The model's factory class will be used by Induction to instantiate 
    objects of the respective model class. If no factory class is defined Induction 
    will expect the model class to have a single public constructor, which Induction 
    will call with parameter injection semantics.
    -->
    <model-defs>
        <model-def>
            <class>demoapp.counter_app.Counter</class>
            <scope>session</scope>
        </model-def>
        <model-def>
            <class>demoapp.models_app.FooModel</class>
            <scope>session</scope>
        </model-def>
        <model-def>
            <class>demoapp.models_app.BarModel</class>
            <scope>session</scope>
            <factory-class>demoapp.models_app.BarModelFactory</factory-class>
        </model-def>
        <model-def>
            <class>demoapp.models_app.TarModel</class>
            <scope>application</scope>
        </model-def>
        <model-def>
            <class>demoapp.urlresolver_app.URLResolverModel</class>
            <scope>session</scope>
        </model-def>
    </model-defs>

    <!-- The following section configures the templating engine -->
    <templating>
        <template-path>
            <directory>c:/acciente/acciente-projects/software/project/demoapp/src/demoapp/helloworld3_app</directory>
            <directory>c:/acciente/acciente-projects/software/project/demoapp/src/demoapp/redirectresolver_app</directory>
            <directory>c:/acciente/acciente-projects/software/project/demoapp/src/demoapp/errorhandler_app</directory>
            <!-- <web-app-path>/WEB-INF/templates</web-app-path> -->
        </template-path>
        <expose-public-fields>true</expose-public-fields>
    </templating>

    <controller-mapping>
        <url-to-class-map>
            <url-pattern>/(\w+)(?:\.(\w+))?\.action</url-pattern>
            <class-packages>demoapp</class-packages>
            <class-pattern>(?:.*\.)?(\w*)Controller</class-pattern>
        </url-to-class-map>

        <default-handler-method>handler</default-handler-method>
        <ignore-handler-method-case>true</ignore-handler-method-case>

        <error-to-class-map>
            <exception-pattern>
               <class-name>java.lang.Throwable</class-name>
               <!-- we can optionally specify if super types should be handled too, default is true -->
               <include-derived>true</include-derived>
            </exception-pattern>
            <class-name>demoapp.errorhandler_app.ErrorHandlerController</class-name>
            <!-- 
            <class-method-name>a.fully.qualified.controller.ClassName</class-method-name> 
            -->
        </error-to-class-map>
    </controller-mapping>

    <view-mapping>
        <url-to-class-map>
            <url-pattern>/((?:\w|-)+)</url-pattern>
            <class-packages>demoapp</class-packages>
            <class-pattern>(?:.*\.)?(\w+)View</class-pattern>
            <class-replace>
               <find>__</find>
               <replace>-</replace>
            </class-replace>
        </url-to-class-map>
    </view-mapping>

    <redirect-mapping>
        <class-to-url-map>
            <class-packages>demoapp</class-packages>
            <class-pattern>(?:.*\.)?(\w+)Controller</class-pattern>
            <url-format>/$Name.action</url-format>
            <url-format-alt>/$Name.$Method.action</url-format-alt>
        </class-to-url-map>
        <class-to-url-map>
            <class-packages>demoapp</class-packages>
            <class-pattern>(?:.*\.)?(\w+)View</class-pattern>
            <url-format>/$Name</url-format>
        </class-to-url-map>

        <url-base>http://localhost:8080</url-base>
    </redirect-mapping>

</config> 
